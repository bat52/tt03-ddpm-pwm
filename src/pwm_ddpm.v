// File: /media/marco/DATA/programming/rtl/ddpm/tt03-ddpm-pwm/src/myhdl/work_ddpm/pwm_ddpm.v
// Generated by MyHDL 0.11.42
// Date: Wed Mar  1 20:59:33 2023


`timescale 1ns/10ps

module pwm_ddpm (
    clk,
    resetn,
    inval,
    pwm,
    ddpm
);


input clk;
input resetn;
input [5:0] inval;
output pwm;
reg pwm;
output ddpm;
reg ddpm;

reg [5:0] count;
wire [5:0] ddpm_int_all;
reg ddpm_int [0:6-1];

assign ddpm_int_all[5] = ddpm_int[0];
assign ddpm_int_all[4] = ddpm_int[1];
assign ddpm_int_all[3] = ddpm_int[2];
assign ddpm_int_all[2] = ddpm_int[3];
assign ddpm_int_all[1] = ddpm_int[4];
assign ddpm_int_all[0] = ddpm_int[5];


always @(negedge clk, negedge resetn) begin: PWM_DDPM_COUNT_PROC
    if (resetn == 0) begin
        count <= 63;
    end
    else begin
        if ((count > 0)) begin
            count <= (count - 1);
        end
        else begin
            count <= (64 - 1);
        end
        // pass
    end
end


always @(inval, count) begin: PWM_DDPM_PWM_PROC
    if ((count < inval)) begin
        pwm = 1;
    end
    else begin
        pwm = 0;
    end
    // pass
end


always @(inval, count) begin: PWM_DDPM_DDPM_INT_PROC
    integer bidx;
    for (bidx=0; bidx<6; bidx=bidx+1) begin
        if ((($signed({1'b0, count}) & ((2 ** (6 - bidx)) - 1)) == (2 ** ((6 - 1) - bidx)))) begin
            ddpm_int[bidx] = inval[bidx];
        end
        else begin
            ddpm_int[bidx] = 0;
        end
        // pass
    end
end


always @(ddpm_int_all) begin: PWM_DDPM_DDPM_PROC
    if ((ddpm_int_all > 0)) begin
        ddpm = 1;
    end
    else begin
        ddpm = 0;
    end
end

endmodule
